local wezterm = require("wezterm")

local act = wezterm.action

-- add files in dotfiles to path to use them
local utils_path = os.getenv("HOME") .. "/dotfiles/wezterm/lua/?.lua"
package.path = package.path .. ";" .. utils_path

local actions = require("actions")
local keys = require("keys")

local function is_dark()
  return wezterm.gui.get_appearance():find("Dark")
end

local theme = is_dark()
    and {
      color_scheme = "Harmonic16 Dark (base16)",
      background = {
        color = "#0b1c2c",
        opacity = 0.95,
      },
    }
  or {
    color_scheme = "Harmonic16 Light (base16)",
    background = {
      color = "#92bfe8",
      opacity = 0.9,
    },
  }

-- @param dark (int) Represents the darkness level of the background.
-- @param light (int) Represents the lightness level of the background.
-- @return The computed background color.
local function get_background()
  return {
    source = {
      Color = theme.background.color,
    },

    width = "100%",
    height = "100%",

    opacity = theme.background.opacity,
  }
end

wezterm.on("less-opacity", function(window, _)
  actions.change_opacity(window, -0.05)
end)

wezterm.on("more-opacity", function(window, _)
  actions.change_opacity(window, 0.05)
end)

wezterm.on("reset-opacity", function(window, _)
  local current = actions.get_current_opacity(window)
  local target = theme.background.opacity

  local amount = target - current

  actions.change_opacity(window, amount)
end)

---@type Config
---@diagnostic disable: missing-fields
local config = {
  background = {
    get_background(),
  },

  font_size = 12,
  line_height = 1,

  font = wezterm.font_with_fallback({
    {
      family = "MesloLGSDZ Nerd Font Propo",
      weight = "Medium",
    },

    {
      family = "JetBrainsMono Nerd Font Propo",
      weight = "DemiBold",
    },
    {
      family = "GeistMono Nerd Font Mono",
      weight = "DemiBold",
    },
    {
      family = "Cascadia Code NF",
      weight = "Medium",
    },
  }),

  color_scheme = theme.color_scheme,

  window_padding = {
    left = 10,
    right = 10,
    top = 10,
    bottom = 0,
  },

  set_environment_variables = {
    -- BAT_THEME = get_color_scheme(),
    -- LC_ALL = "en_US.UTF-8",
  },

  -- general options
  adjust_window_size_when_changing_font_size = false,
  debug_key_events = false,
  enable_tab_bar = false,
  native_macos_fullscreen_mode = false,
  window_close_confirmation = "NeverPrompt",
  window_decorations = "RESIZE",

  -- keys
  keys = {
    -- cmd_key(".", multiple_actions(":ZenMode")),
    -- cmd_key("[", act.SendKey({ mods = "CTRL", key = "o" })),
    -- cmd_key("]", act.SendKey({ mods = "CTRL", key = "i" })),
    -- cmd_key("f", multiple_actions(":Grep")),
    -- k.cmd_key("H", act.SendKey({ mods = "CTRL", key = "h" })),
    -- cmd_key("i", multiple_actions(":SmartGoTo")),
    -- k.cmd_key("J", act.SendKey({ mods = "CTRL", key = "j" })),
    -- k.cmd_key("K", act.SendKey({ mods = "CTRL", key = "k" })),
    -- k.cmd_key("K", act.SendKey({ mods = "CTRL", key = "k" })),
    -- k.cmd_key("L", act.SendKey({ mods = "CTRL", key = "l" })),
    -- cmd_key("O", multiple_actions(":GoToSymbol")),
    -- cmd_key("P", multiple_actions(":GoToCommand")),
    -- cmd_key("p", multiple_actions(":GoToFile")),

    -- cmd_key("q", multiple_actions(":q")),
    -- cmd_key("q", multiple_actions(":qa!")),

    -- cmd_to_tmux_prefix("`", "n"),
    -- cmd_to_tmux_prefix("b", "b"),
    -- cmd_to_tmux_prefix("C", "C"),
    -- cmd_to_tmux_prefix("d", "D"),
    -- cmd_to_tmux_prefix("G", "G"),
    -- cmd_to_tmux_prefix("g", "g"),
    -- cmd_to_tmux_prefix("j", "J"),
    -- cmd_to_tmux_prefix("K", "R"),
    -- cmd_to_tmux_prefix("k", "K"),
    -- cmd_to_tmux_prefix("l", "L"),
    -- cmd_to_tmux_prefix("n", "%"),
    -- cmd_to_tmux_prefix("N", '"'),
    -- cmd_to_tmux_prefix("o", "u"),
    -- cmd_to_tmux_prefix("T", "B"),
    -- cmd_to_tmux_prefix("Y", "Y"),
    -- cmd_to_tmux_prefix("t", "c"),
    -- cmd_to_tmux_prefix("w", "x"),
    -- cmd_to_tmux_prefix("z", "z"),
    -- cmd_to_tmux_prefix("Z", "Z"),
    -- cmd_to_tmux_prefix("9", "9"),
    -- cmd_ctrl_to_tmux_prefix("t", "J"),

    -- cmd_key(
    -- 	"R",
    -- 	act.Multiple({
    -- 		act.SendKey({ key = "\x1b" }), -- escape
    -- 		multiple_actions(":source %"),
    -- 	})
    -- ),

    -- {
    -- 	mods = "CTRL",
    -- 	key = "Tab",
    -- 	action = act.Multiple({
    -- 		act.SendKey({ mods = "CTRL", key = "b" }),
    -- 		act.SendKey({ key = "n" }),
    -- 	}),
    -- },
    --
    -- {
    -- 	mods = "CTRL|SHIFT",
    -- 	key = "Tab",
    -- 	action = act.Multiple({
    -- 		act.SendKey({ mods = "CTRL", key = "b" }),
    -- 		act.SendKey({ key = "n" }),
    -- 	}),
    -- },

    -- FIX: disable binding
    -- {
    -- 	mods = "CMD",
    -- 	key = "`",
    -- 	action = act.Multiple({
    -- 		act.SendKey({ mods = "CTRL", key = "b" }),
    -- 		act.SendKey({ key = "n" }),
    -- 	}),
    -- },

    -- {
    -- 	mods = "CMD",
    -- 	key = "~",
    -- 	action = act.Multiple({
    -- 		act.SendKey({ mods = "CTRL", key = "b" }),
    -- 		act.SendKey({ key = "p" }),
    -- 	}),
    -- },

    -- go to window #
    keys.cmd_to_tmux_prefix("1", "1"),
    keys.cmd_to_tmux_prefix("2", "2"),
    keys.cmd_to_tmux_prefix("3", "3"),
    keys.cmd_to_tmux_prefix("4", "4"),
    keys.cmd_to_tmux_prefix("5", "5"),
    keys.cmd_to_tmux_prefix("6", "6"),
    keys.cmd_to_tmux_prefix("7", "7"),
    keys.cmd_to_tmux_prefix("8", "8"),

    -- go to last window
    keys.cmd_to_tmux_prefix("9", "9"),

    -- save
    keys.cmd_key(
      "s",
      act.Multiple({
        keys.key({ key = "\x1b" }), -- escape
        keys.multiple_actions(":w"),
      })
    ),

    -- find
    -- TODO(miguel): review this - 2024/12/01
    {
      mods = "CMD|SHIFT",
      key = "f",
      action = act.Multiple({
        keys.key({ mods = "CMD", key = "f" }),
        -- act.SendKey({ key = "n" }),
      }),
    },

    -- zoom / full screen
    {
      mods = "CMD",
      key = "z",
      action = keys.tmux_prefixed_key({ key = "z" }),
    },

    -- tmux deattach and reattach
    {
      mods = "CMD",
      key = "d",
      action = keys.tmux_prefixed_key({ key = "d" }),
    },
    {
      mods = "CMD|SHIFT",
      key = "d",
      action = keys.multiple_actions("tmux a || tmux\r"),
    },

    {
      mods = "CMD|CTRL",
      key = "-",
      action = act.EmitEvent("less-opacity"),
    },
    {
      mods = "CMD|CTRL",
      key = "0",
      action = act.EmitEvent("reset-opacity"),
    },
    {
      mods = "CMD|CTRL",
      key = "=",
      action = act.EmitEvent("more-opacity"),
    },

    {
      mods = "CMD|ALT|CTRL",
      key = "t",
      action = act.ToggleAlwaysOnTop,
    },

    -- open yazi here
    {
      mods = "CMD",
      key = "e",
      action = keys.multiple_actions("yazi\r"),
    },

    -- open vim here
    {
      mods = "CMD",
      key = "i",
      action = keys.multiple_actions("vim .\r"),
    },

    -- alternate window tmux
    {
      mods = "CMD",
      key = "a",
      action = keys.tmux_prefixed_key({ mods = "CTRL", key = "a" }),
    },
    -- find tmux window (fuzzy find)
    {
      mods = "CMD",
      key = "f",
      action = keys.tmux_prefixed_key({ mods = "CTRL", key = "f" }),
    },
    -- move left/right through tmux windows
    {
      mods = "CMD|SHIFT",
      key = "j",
      action = keys.tmux_prefixed_key({ mods = "CTRL", key = "h" }),
    },
    {
      mods = "CMD|SHIFT",
      key = "k",
      action = keys.tmux_prefixed_key({ mods = "CTRL", key = "l" }),
    },

    -- TODO(miguel): wtf is this - 2024/12/01
    -- moving right or left a pane?
    -- [[keyboard.bindings]]
    -- chars = "\u0001\u000B"
    -- key = "Period"
    -- mods = "Command|Shift"
    -- {
    -- 	mods = "CMD|SHIFT",
    -- 	key = ".",
    -- 	action = act.Multiple({
    --       tmux_prefix(),
    -- 		act.SendKey({  key = "\u{000B}" }),
    -- 	}),
    -- },
    -- TODO(miguel): wtf is this - 2024/12/01
    -- [[keyboard.bindings]]
    -- chars = """
    -- \u0001
    -- """
    -- key = "Comma"
    -- mods = "Command|Shift"

    -- changing panes with keyboard
    {
      mods = "CMD|ALT",
      key = "1",
      action = keys.tmux_prefixed(keys.multiple_actions("\u{001B}OP")),
    },
    {
      mods = "CMD|ALT",
      key = "2",
      action = keys.tmux_prefixed(keys.multiple_actions("\u{001B}OQ")),
    },
    {
      mods = "CMD|ALT",
      key = "3",
      action = keys.tmux_prefixed(keys.multiple_actions("\u{001B}OR")),
    },
    {
      mods = "CMD|ALT",
      key = "4",
      action = keys.tmux_prefixed(keys.multiple_actions("\u{001B}OS")),
    },

    -- fuzzy find tmux sessions
    {
      mods = "CMD",
      key = "j",
      action = keys.tmux_prefixed_key({ key = "'" }),
    },
    -- alternate tmux session
    {
      mods = "CMD",
      key = "o",
      action = keys.tmux_prefixed_key({ mods = "CTRL", key = "q" }),
    },

    -- new tmux window (tab)
    {
      mods = "CMD",
      key = "t",
      action = keys.tmux_prefixed_key({ mods = "SHIFT", key = "n" }),
    },
  },
}

-- and finally, return the configuration to wezterm
return config
