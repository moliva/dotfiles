set -g default-command "reattach-to-user-namespace -l zsh"
# tmux display things in 256 colors
set -g default-terminal "screen-256color"

set-option -sa terminal-overrides ",xterm*:Tc"

set -g history-limit 20000

# automatically renumber tmux windows
set -g renumber-windows on

# unbind default prefix and set it to Ctrl+a
unbind C-b
set -g prefix C-a

# for nested tmux sessions
bind a send-prefix

# Activity Monitoring
setw -g monitor-activity on
set -g visual-activity off
set-window-option -g window-status-activity-style fg=colour222
# set-window-option -gw window-status-activity-fg default
# set-option -gw window-status-activity-bg purple

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# make delay shorter
set -sg escape-time 0

# tile all windows
unbind =
bind = select-layout tiled

# cycle through panes
# unbind C-a
# unbind o # this is the default key for cycling panes
# bind ^A select-pane -t:.+

# make window/pane index start with 1
set -g base-index 1
setw -g pane-base-index 1

# set -g set-titles on
# set -g set-titles-string "#T - #W"
# set -g automatic-rename on
set -g allow-rename off

######################
#### Key Bindings ####
######################

# reload config file
bind r source-file ~/.tmux.conf \; display "Config Reloaded!"

# quickly open a new window
bind N new-window

# split window and fix path for tmux 1.9
bind \\ split-window -h -c '#{pane_current_path}' # Split panes vertically
bind - split-window -v -c "#{pane_current_path}"

# synchronize all panes in a window
bind e setw synchronize-panes

# pane movement shortcuts
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind -r C-o swap-pane -D
bind -r C-i swap-pane -U

bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Resize pane shortcuts
bind -r H resize-pane -L 10
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10
bind -r L resize-pane -R 10

# move window left or right
bind -r C-j run "tmux swap-window -t -1 && tmux select-window -t $(expr '#I' - 1)"
bind -r C-k run "tmux swap-window -t +1 && tmux select-window -t $(expr '#I' + 1)"
# bind -r C-j swap-window -t -1
# bind -r C-k swap-window -t +1

# enable mouse support for switching panes/windows
# NOTE: This breaks selecting/copying text on OSX
# To select text as expected, hold Option to disable it (iTerm2)
# setw -g mode-mouse on
# set -g mouse-select-pane on
# set -g mouse-resize-pane on
# set -g mouse-select-window on
setw -g mouse on

# maximizing and restoring windows
unbind Up
bind Up new-window -d -n fullscreen \; swap-pane -s fullscreen.1 \; select-window -t fullscreen
unbind Down
bind Down last-window \; swap-pane -s fullscreen.2 \; kill-window -t fullscreen

# go back to last active window
bind C-a last-window

# Select last window (i.e. with biggest index)
bind 9 run "tmux select-window -t $(tmux list-windows | tail -n 1 | sed \"s/\\(\\d*\\):.*/\\1/\")"

# set vi mode for copy mode
setw -g mode-keys vi
# more settings to make copy-mode more vim-like
unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
#bind -t vi-copy 'v' begin-selection
bind -Tcopy-mode-vi v send -X begin-selection
#bind -t vi-copy 'y' copy-selection
bind -Tcopy-mode-vi y send -X copy-selection

# Buffers to/from Mac clipboard, yay tmux book from pragprog
bind C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
bind C-v run "tmux set-buffer $(reattach-to-user-namespace pbpaste); tmux paste-buffer"

# fuzzy finds a window in the current session
bind C-f display-popup -h '70%' -w '70%' -E "tmux select-window -t $(tmux list-windows | grep -v '(active)' | awk '{print($1, $2, $3, $4) }' | fzf --bind 'ctrl-u:preview-half-page-up' --bind 'ctrl-d:preview-half-page-down' --reverse --header 'Select window' --header-first --preview 'echo {} | awk \"{ print(\\\"'$(tmux display-message -p '#S')':\\\"substr(\\$1, 1, length(\\$1) -1)) }\" | xargs tmux capture-pane -pt ' --preview-window '70%' | awk '{ print substr($1, 1, length($1) - 1)}')"

# fuzzy finds a session
bind \' display-popup -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse --bind 'ctrl-n:execute(tmux new-session -s {q} -d)+accept-or-print-query' | xargs tmux switch-client -t"
bind C-q switch-client -l

# makes a 3 pane split for editor, server and console in the current window
bind M run "tmux split-window -v -p 30 -c '#{pane_current_path}' && tmux split-window -h -p 50 -c '#{pane_current_path}' && tmux select-pane -t 1"

# bind o command-prompt -p "New Status: " "set -g status-left '%1'"

# create new session prompting for a name
bind o command-prompt -p "New session: " "new-session -s '%1'"

# select-pane -t 1
bind f1 run "tmux select-pane -t 1 || tmux display-message  'no window 1'"
bind f2 run "tmux select-pane -t 2 || tmux display-message  'no window 2'"
bind f3 run "tmux select-pane -t 3 || tmux display-message  'no window 3'"
bind f4 run "tmux select-pane -t 4 || tmux display-message  'no window 4'"
bind f5 run "tmux select-pane -t 5 || tmux display-message  'no window 5'"
bind f6 run "tmux select-pane -t 6 || tmux display-message  'no window 6'"
bind f7 run "tmux select-pane -t 7 || tmux display-message  'no window 7'"
bind f8 run "tmux select-pane -t 8 || tmux display-message  'no window 8'"
bind f9 run "tmux select-pane -t 9 || tmux display-message  'no window 9'"

##############################
### Plugin management ###
##############################

# resurrect vim + neovim
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'

set -g @continuum-restore 'on'

# set -g @continuum-boot 'on'
# TODO(miguel): wezterm not supported yet, wait for pr to be merged  - 2024/12/07
# https://github.com/tmux-plugins/tmux-continuum/pull/142/files
# set -g @continuum-boot-options 'alacritty'


# tmux-jump
set -g @jump-key 'c'


##############################
### Color & Style Settings ###
##############################

source $DOTFILES/tmux/tmuxtheme.sh
#source $DOTFILES/tmux/tmuxtheme_nounicode.sh

##############################
### yazi config for images ###
##############################

# set -g allow-passthrough on

set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM

##############################
### Tmux plugins ###
##############################

#  check if tpm is already installed, if not clone it before installing plugins!
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'

# possible plugins to add
# https://github.com/catppuccin/tmux
# https://github.com/christoomey/vim-tmux-navigator

# for better mouse management
set -g @plugin 'nhdaly/tmux-scroll-copy-mode'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-yank'
#set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-resurrect' # needs tpope/obsession.vim
set -g @plugin 'tmux-plugins/tmux-continuum'

set -g @plugin 'schasse/tmux-jump'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
